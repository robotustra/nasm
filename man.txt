[8.09.2015]
 

nasm -f elf myfile.asm 
будет ассемблировать myfile.asm в ELF-объектный файл myfile.o. А строка

nasm -f bin myfile.asm -o myfile.com 

будет ассемблировать myfile.asm в обычный бинарный файл myfile.com.

Для получения файла-листинга, содержащего слева от оригинального исходного текста шестнадцатиричные коды, генерируемые NASM, используйте ключ -l, обозначающий имя файла-листинга, например:

nasm -f coff myfile.asm -l myfile.lst 


nasm -E myfile.err -f obj myfile.asm  - ошибки

Ключ -s перенаправляет стандартный поток ошибок stderr в выходной поток stdout (естественно, в MS-DOS). Например, для ассемблирования файла myfile.asm и передачи ошибок программе more, вы можете ввести следующее:

nasm -s -f obj myfile.asm | more 

Когда NASM встречает в исходнике директиву %include (см. параграф 4.5), он будет искать указанный в ней файл не только в текущем каталоге, но и во всех каталогах, указанных в командной строке при помощи ключа -i. Следовательно, вы можете включить файлы из, например, библиотеки макросов, введя следующую команду:

nasm -ic:\macrolib\ -f obj myfile.asm 

При помощи ключа -p NASM позволяет вам предварительно включить некоторые файлы в ваш 
исходник. Так, строка запуска

nasm myfile.asm -p myinc.inc 

db 0x55 ; просто байт 0x55 
db 0x55,0x56,0x57 ; последовательно 3 байта 
db 'a',0x55 ; символьная константа 
db 'hello',13,10,'$' ; это строковая константа 
dw 0x1234 ; 0x34 0x12 
dw 'a' ; 0x41 0x00 (это просто число) 
dw 'ab' ; 0x41 0x42 (символьная константа) 
dw 'abc' ; 0x41 0x42 0x43 0x00 (строка) 
dd 0x12345678 ; 0x78 0x56 0x34 0x12 
dd 1.234567e20 ; константа с плавающей точкой 
dq 1.234567e20 ; двойной точности dt 1.234567e20 ; расширенной точности 

DQ и DT не допускают в качестве операндов числовые или строковые константы.

buffer: resb 64 ; резервирование 64 байт 
wordvar: resw 1 ; резервирование слова 
realarray resq 10 ; массив из 10 чисел с плавающей точкой 


incbin "file.dat" ; включение файла целиком 

incbin "file.dat",1024 ; пропуск первых 1024 байт 

incbin "file.dat",1024,512 ; пропуск первых 1024 и 
						   ; включение следующих 512 байт


message db 'Привет, фуфел!' 
msglen equ $-message 
определяет msglen как константу 12. msglen не может быть позднее переопределено.


wordvar dw 123 
mov ax,[wordvar] 
mov ax,[wordvar+1] 
mov ax,[es:wordvar+bx] 

Любая другая ссылка, не соответствующая этой простой системе, для NASM недействительна, например es:wordvar[bx].

Более сложные эффективные адреса, когда вовлечено более одного регистра, работают точно также:

mov eax,[ebx*2+ecx+offset] 
mov ax,[bp+di+8] 

NASM способен воспринимать алгебру таких выражений, поэтому он правильно транслирует вещи, выглядящие на первый взгляд недопустимыми:

mov eax,[ebx*5] ; 

ассемблируется как 
[ebx*4+ebx] 
mov eax,[label1*2-label2] ; то есть [label1+(label1-label2)] 


Некоторые примеры числовых констант:

mov ax,100 ; десятичная 
mov ax,0a2h ; шестнадцатеричная 
mov ax,$0a2 ; снова hex: нужен 0 
mov ax,0xa2 ; опять hex 
mov ax,777q ; восьмеричная 
mov ax,10010011b ; двоичная 

Символьная константа, содержащая более одного символа, будет загружаться в обратном порядке следования байт: если вы пишете

mov eax,'abcd' 
сгенерированной константой будет не 0x61626364, а 0x64636261, поэтому если сохранить эту константу в память, а затем прочитать, получится снова abcd, но никак не dcba. Это также влияет на инструкцию CPUID Пентиумов (см. section A.29).

db 'hello' ; строковая константа db 'h','e','l','l','o' ; эквивалент из символьных констант 
Следующие строки также эквивалентны:

dd 'ninechars' ; строковая константа в двойное слово 
dd 'nine','char','s' ; три двойных слова 
db 'ninechars',0,0,0 ; и действительно похоже 

dd 1.2 ; "простое" число 
dq 1.e10 ; 10,000,000,000 
dq 1.e+10 ; синоним 1.e10 
dq 1.e-10 ; 0.000 000 000 1 
dt 3.141592653589793238462 ; число pi 

В выражениях NASM поддерживает два специальных символа, позволяющих при вычислениях выражений получать текущую позицию (смещение) ассемблирования: это знаки $ и $$. Знак $ вычисляет позицию начала строки, содержащей выражение, т.е. вы можете сделать бесконечный цикл при помощи команды JMP $. Знак $$ определяет начало текущей секции (сегмента), поэтому вы можете узнать, как далеко находитесь от начала секции при помощи выражения ($-$$).

* является оператором умножения. Операторы / и // обозначают деление: / соответствует беззнаковому делению, а // - знаковому. Подобно этому, операторы % и %% обеспечивают соответственно беззнаковое и знаковое получение остатка от деления (взятие по модулю).

Наивысший приоритет в грамматике выражений NASM имеют операторы, применяемые к одному аргументу: оператор "минус" (-) изменяет знак своего операнда, оператор "плюс" (+) ничего не делает (введен для симметричности с минусом), оператор "тильда" (~) вычисляет дополнение операнда, а оператор SEG извлекает сегментный адрес операнда



Оператор SEG возвращает базу предопределенного сегмента символа, относительно которой вычисляется смещение последнего. Так следующий код

mov ax,seg symbol 
mov es,ax mov bx,symbol 

будет загружать в пару ES:BX корректный указатель на символ symbol.

Бывают и более сложные случаи: т.к. 16-битные сегменты и группы способны перекрываться, вы возможно захотите иногда сослаться на некоторый символ при помощи базы сегмента, отличного от предопределенного. NASM позволяет это сделать при помощи ключевого слова WRT (With Reference To). Например, код

mov ax,weird_seg ; weird_seg является базой сегмента 
mov es,ax 
mov bx,symbol wrt weird_seg

загрузит в ES:BX другой, но функционально эквивалентный указатель на символ symbol.


NASM поддерживает дальние (межсегментные) вызовы подпрограмм и передачи управления при помощи синтаксиса call segment:offset, где segment и offset являются непосредственными значениями, поэтому для вызова дальней процедуры вы можете использовать следующий синтаксис:

call (seg procedure):procedure 
call weird_seg:(procedure wrt weird_seg)

(Круглые скобки включены для большей ясности приведенных инструкций. На практике они не нужны).

NASM также поддерживает синтаксис 
call far, являющийся аналогом первой из выше приведенных инструкций. В этих примерах инструкция JMP будет работать также, как CALL.

Для объявления дальнего указателя на сегмент данных, вы можете писать:

dw symbol, seg symbol

NASM не поддерживает более удобных аналогов этому объявлению, однако при помощи макропроцессора вы всегда можете их придумать.


NASM дает специальную трактовку символов, начинающихся с точки. Метка, начинающаяся с точки, обрабатывается как локальная. Это означает, что она неразрывно связана с предыдущей нелокальной меткой. Например:

label1 ; некоторый код
	.loop ; еще какой-то код 
	jne .loop 
	ret 

label2 ; некоторый код
	.loop ; еще какой-то код 
	jne .loop 
	ret 


В приведенном фрагменте каждая инструкция JNE переходит на строку непосредственно перед ней, т.к. два определения .loop остаются разделены в силу того, что каждое связано с предшествующей нелокальной меткой.


Данный способ обработки локальных меток позаимствован из ассемблера DevPac (Amiga); однако NASM делает шаг вперед - он позволяет обращаться к локальным меткам из другой части кода. Это достигается путем описания локальной метки на основе предыдущей нелокальной. Описания .loop в примере выше в действительности описывают два разных символа: label1.loop и label2.loop, поэтому если вам это действительно надо, то можете написать:

label3 ; некоторый код ; и т.д. 
	jmp label1.loop 

Иногда бывает полезно, например, в макросах - определить метку, на которую можно ссылаться отовсюду, но которая не пересекается с обычным механизмом локальных меток. Такая метка не может быть нелокальной, так как существует последующее описание и ссылки на локальные метки; она также не может быть и локальной, вследствие того, что описывающий ее макрос не будет знать полное имя метки. Для разрешения этой проблемы в NASM введен третий тип меток, которые обычно используются только в описаниях макросов: если метка начинается со специального префикса ..@, она ничего не делает по отношению к механизму локальных меток. Таким образом, вы можете написать:

label1: ; нелокальная метка
	.local: ; это label1
	.local..@foo: ; это специальный символ 

label2: ; другая нелокальная метка
	.local: ; это label2
	.local jmp ..@foo ; переход на три строки вверх 


NASM имеет возможность определять другие специальные символы, начинающиеся с двух точек: например, ..start используется для указания точки входа в объектном формате obj 

